#version 330 core

struct PointLight {
    vec3 position;
    vec3 color;
    float strength;
};

in vec2 fragmentTexCoord;
in vec3 fragmentPosition;
in vec3 fragmentNormal;

uniform samplerCube skyTexture;
uniform sampler2D imageTexture;
uniform PointLight Lights[8];
uniform vec3 cameraPosition;

out vec4 color;

vec3 calculatePointLight(PointLight light, vec3 fragmentPosition, vec3 fragmentNormal);

void main()
{
    vec3 temp = vec3(0.0);
    float ambientScale = 2.5;

    //add to ambience
    temp += ambientScale * texture(imageTexture, fragmentTexCoord).rgb;


    for (int i = 0; i < 8; i ++) {
        temp += calculatePointLight(Lights[i], fragmentPosition, fragmentNormal);
    }

    //THIS IS GETTING REFLECTIONS FROM THE CUBEMAP
    //incident ray
    vec3 viewerToFragment = normalize(fragmentPosition - cameraPosition);
    vec3 reflectedRayDirection = reflect(viewerToFragment, fragmentNormal);
    vec4 skyColor = texture(skyTexture, reflectedRayDirection);

    //multiply skyColor to the current Wood colour to tint the final pixel
    
    //vec4 baseColor = texture(imageTexture, fragmentTexCoord);
    //color = baseColor;
    color = skyColor * vec4(temp,1.0);
}

vec3 calculatePointLight(PointLight light, vec3 fragmentPosition, vec3 fragmentNormal) {
    vec3 result = vec3(0.0);
    vec3 baseTexture = texture(imageTexture, fragmentTexCoord).rgb;

    //diffuse light
    //geometric data
    // fraglight represents the vector from the fragment to the light
    vec3 fragLight = light.position - fragmentPosition;
    float distance = length(fragLight);
    fragLight = normalize(fragLight);
    // for specular reflection
    vec3 fragCamera = normalize(cameraPosition - fragmentPosition);
    vec3 halfVec = normalize(fragLight + fragCamera);

    //ambient - increase proportion of light by a small proportion
    // result += 0.6 * baseTexture;

    //diffuse
    // tint the colour by the point light, and creating the dot product of normal and fraglight will create the incident ray. 
    // multiply this by distance squared, because light has quad distance falloff
    result += light.color * light.strength * max(0.0, dot(fragmentNormal, fragLight)) / (distance * distance) * baseTexture;

    //specular
    result += light.color * light.strength * pow(max(0.0, dot(fragmentNormal, halfVec)),32) / (distance * distance);

    return result;
}